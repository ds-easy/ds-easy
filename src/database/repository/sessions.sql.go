// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
	id,
	user_id
)
VALUES (?, ?) RETURNING id, user_id, expiration
`

type CreateSessionParams struct {
	ID     uuid.UUID `json:"id"`
	UserID int64     `json:"user_id"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.queryRow(ctx, q.createSessionStmt, createSession, arg.ID, arg.UserID)
	var i Session
	err := row.Scan(&i.ID, &i.UserID, &i.Expiration)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE id = ?
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteSessionStmt, deleteSession, id)
	return err
}

const findSessionById = `-- name: FindSessionById :one
SELECT id, user_id, expiration FROM sessions WHERE id = ?
`

func (q *Queries) FindSessionById(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.queryRow(ctx, q.findSessionByIdStmt, findSessionById, id)
	var i Session
	err := row.Scan(&i.ID, &i.UserID, &i.Expiration)
	return i, err
}
