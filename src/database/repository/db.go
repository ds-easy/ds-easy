// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addUserStmt, err = db.PrepareContext(ctx, addUser); err != nil {
		return nil, fmt.Errorf("error preparing query AddUser: %w", err)
	}
	if q.findAccessibleExercisesStmt, err = db.PrepareContext(ctx, findAccessibleExercises); err != nil {
		return nil, fmt.Errorf("error preparing query FindAccessibleExercises: %w", err)
	}
	if q.findAccessibleExercisesByLessonNameStmt, err = db.PrepareContext(ctx, findAccessibleExercisesByLessonName); err != nil {
		return nil, fmt.Errorf("error preparing query FindAccessibleExercisesByLessonName: %w", err)
	}
	if q.findAllLessonNamesStmt, err = db.PrepareContext(ctx, findAllLessonNames); err != nil {
		return nil, fmt.Errorf("error preparing query FindAllLessonNames: %w", err)
	}
	if q.findAllTemplateNamesStmt, err = db.PrepareContext(ctx, findAllTemplateNames); err != nil {
		return nil, fmt.Errorf("error preparing query FindAllTemplateNames: %w", err)
	}
	if q.findAllUsersStmt, err = db.PrepareContext(ctx, findAllUsers); err != nil {
		return nil, fmt.Errorf("error preparing query FindAllUsers: %w", err)
	}
	if q.findExamsStmt, err = db.PrepareContext(ctx, findExams); err != nil {
		return nil, fmt.Errorf("error preparing query FindExams: %w", err)
	}
	if q.findExercisesStmt, err = db.PrepareContext(ctx, findExercises); err != nil {
		return nil, fmt.Errorf("error preparing query FindExercises: %w", err)
	}
	if q.findExercisesByNameStmt, err = db.PrepareContext(ctx, findExercisesByName); err != nil {
		return nil, fmt.Errorf("error preparing query FindExercisesByName: %w", err)
	}
	if q.findLessonByNameStmt, err = db.PrepareContext(ctx, findLessonByName); err != nil {
		return nil, fmt.Errorf("error preparing query FindLessonByName: %w", err)
	}
	if q.findLessonsStmt, err = db.PrepareContext(ctx, findLessons); err != nil {
		return nil, fmt.Errorf("error preparing query FindLessons: %w", err)
	}
	if q.findPublicExercisesStmt, err = db.PrepareContext(ctx, findPublicExercises); err != nil {
		return nil, fmt.Errorf("error preparing query FindPublicExercises: %w", err)
	}
	if q.findPublicExercisesByLessonNameStmt, err = db.PrepareContext(ctx, findPublicExercisesByLessonName); err != nil {
		return nil, fmt.Errorf("error preparing query FindPublicExercisesByLessonName: %w", err)
	}
	if q.findPublicExercisesByNameStmt, err = db.PrepareContext(ctx, findPublicExercisesByName); err != nil {
		return nil, fmt.Errorf("error preparing query FindPublicExercisesByName: %w", err)
	}
	if q.findRandomAccessibleExercisesByLessonNameWithLimitStmt, err = db.PrepareContext(ctx, findRandomAccessibleExercisesByLessonNameWithLimit); err != nil {
		return nil, fmt.Errorf("error preparing query FindRandomAccessibleExercisesByLessonNameWithLimit: %w", err)
	}
	if q.findRandomPublicExercisesByLessonNameWithLimitStmt, err = db.PrepareContext(ctx, findRandomPublicExercisesByLessonNameWithLimit); err != nil {
		return nil, fmt.Errorf("error preparing query FindRandomPublicExercisesByLessonNameWithLimit: %w", err)
	}
	if q.findTemplateByNameStmt, err = db.PrepareContext(ctx, findTemplateByName); err != nil {
		return nil, fmt.Errorf("error preparing query FindTemplateByName: %w", err)
	}
	if q.findTemplatesStmt, err = db.PrepareContext(ctx, findTemplates); err != nil {
		return nil, fmt.Errorf("error preparing query FindTemplates: %w", err)
	}
	if q.findUserByEmailStmt, err = db.PrepareContext(ctx, findUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query FindUserByEmail: %w", err)
	}
	if q.findUserByIdStmt, err = db.PrepareContext(ctx, findUserById); err != nil {
		return nil, fmt.Errorf("error preparing query FindUserById: %w", err)
	}
	if q.findUserByPBIdStmt, err = db.PrepareContext(ctx, findUserByPBId); err != nil {
		return nil, fmt.Errorf("error preparing query FindUserByPBId: %w", err)
	}
	if q.insertExamStmt, err = db.PrepareContext(ctx, insertExam); err != nil {
		return nil, fmt.Errorf("error preparing query InsertExam: %w", err)
	}
	if q.insertExamExerciseStmt, err = db.PrepareContext(ctx, insertExamExercise); err != nil {
		return nil, fmt.Errorf("error preparing query InsertExamExercise: %w", err)
	}
	if q.insertExerciseStmt, err = db.PrepareContext(ctx, insertExercise); err != nil {
		return nil, fmt.Errorf("error preparing query InsertExercise: %w", err)
	}
	if q.insertLessonStmt, err = db.PrepareContext(ctx, insertLesson); err != nil {
		return nil, fmt.Errorf("error preparing query InsertLesson: %w", err)
	}
	if q.insertTemplateStmt, err = db.PrepareContext(ctx, insertTemplate); err != nil {
		return nil, fmt.Errorf("error preparing query InsertTemplate: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addUserStmt != nil {
		if cerr := q.addUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addUserStmt: %w", cerr)
		}
	}
	if q.findAccessibleExercisesStmt != nil {
		if cerr := q.findAccessibleExercisesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findAccessibleExercisesStmt: %w", cerr)
		}
	}
	if q.findAccessibleExercisesByLessonNameStmt != nil {
		if cerr := q.findAccessibleExercisesByLessonNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findAccessibleExercisesByLessonNameStmt: %w", cerr)
		}
	}
	if q.findAllLessonNamesStmt != nil {
		if cerr := q.findAllLessonNamesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findAllLessonNamesStmt: %w", cerr)
		}
	}
	if q.findAllTemplateNamesStmt != nil {
		if cerr := q.findAllTemplateNamesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findAllTemplateNamesStmt: %w", cerr)
		}
	}
	if q.findAllUsersStmt != nil {
		if cerr := q.findAllUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findAllUsersStmt: %w", cerr)
		}
	}
	if q.findExamsStmt != nil {
		if cerr := q.findExamsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findExamsStmt: %w", cerr)
		}
	}
	if q.findExercisesStmt != nil {
		if cerr := q.findExercisesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findExercisesStmt: %w", cerr)
		}
	}
	if q.findExercisesByNameStmt != nil {
		if cerr := q.findExercisesByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findExercisesByNameStmt: %w", cerr)
		}
	}
	if q.findLessonByNameStmt != nil {
		if cerr := q.findLessonByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findLessonByNameStmt: %w", cerr)
		}
	}
	if q.findLessonsStmt != nil {
		if cerr := q.findLessonsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findLessonsStmt: %w", cerr)
		}
	}
	if q.findPublicExercisesStmt != nil {
		if cerr := q.findPublicExercisesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findPublicExercisesStmt: %w", cerr)
		}
	}
	if q.findPublicExercisesByLessonNameStmt != nil {
		if cerr := q.findPublicExercisesByLessonNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findPublicExercisesByLessonNameStmt: %w", cerr)
		}
	}
	if q.findPublicExercisesByNameStmt != nil {
		if cerr := q.findPublicExercisesByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findPublicExercisesByNameStmt: %w", cerr)
		}
	}
	if q.findRandomAccessibleExercisesByLessonNameWithLimitStmt != nil {
		if cerr := q.findRandomAccessibleExercisesByLessonNameWithLimitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findRandomAccessibleExercisesByLessonNameWithLimitStmt: %w", cerr)
		}
	}
	if q.findRandomPublicExercisesByLessonNameWithLimitStmt != nil {
		if cerr := q.findRandomPublicExercisesByLessonNameWithLimitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findRandomPublicExercisesByLessonNameWithLimitStmt: %w", cerr)
		}
	}
	if q.findTemplateByNameStmt != nil {
		if cerr := q.findTemplateByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findTemplateByNameStmt: %w", cerr)
		}
	}
	if q.findTemplatesStmt != nil {
		if cerr := q.findTemplatesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findTemplatesStmt: %w", cerr)
		}
	}
	if q.findUserByEmailStmt != nil {
		if cerr := q.findUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findUserByEmailStmt: %w", cerr)
		}
	}
	if q.findUserByIdStmt != nil {
		if cerr := q.findUserByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findUserByIdStmt: %w", cerr)
		}
	}
	if q.findUserByPBIdStmt != nil {
		if cerr := q.findUserByPBIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findUserByPBIdStmt: %w", cerr)
		}
	}
	if q.insertExamStmt != nil {
		if cerr := q.insertExamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertExamStmt: %w", cerr)
		}
	}
	if q.insertExamExerciseStmt != nil {
		if cerr := q.insertExamExerciseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertExamExerciseStmt: %w", cerr)
		}
	}
	if q.insertExerciseStmt != nil {
		if cerr := q.insertExerciseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertExerciseStmt: %w", cerr)
		}
	}
	if q.insertLessonStmt != nil {
		if cerr := q.insertLessonStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertLessonStmt: %w", cerr)
		}
	}
	if q.insertTemplateStmt != nil {
		if cerr := q.insertTemplateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertTemplateStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                                     DBTX
	tx                                                     *sql.Tx
	addUserStmt                                            *sql.Stmt
	findAccessibleExercisesStmt                            *sql.Stmt
	findAccessibleExercisesByLessonNameStmt                *sql.Stmt
	findAllLessonNamesStmt                                 *sql.Stmt
	findAllTemplateNamesStmt                               *sql.Stmt
	findAllUsersStmt                                       *sql.Stmt
	findExamsStmt                                          *sql.Stmt
	findExercisesStmt                                      *sql.Stmt
	findExercisesByNameStmt                                *sql.Stmt
	findLessonByNameStmt                                   *sql.Stmt
	findLessonsStmt                                        *sql.Stmt
	findPublicExercisesStmt                                *sql.Stmt
	findPublicExercisesByLessonNameStmt                    *sql.Stmt
	findPublicExercisesByNameStmt                          *sql.Stmt
	findRandomAccessibleExercisesByLessonNameWithLimitStmt *sql.Stmt
	findRandomPublicExercisesByLessonNameWithLimitStmt     *sql.Stmt
	findTemplateByNameStmt                                 *sql.Stmt
	findTemplatesStmt                                      *sql.Stmt
	findUserByEmailStmt                                    *sql.Stmt
	findUserByIdStmt                                       *sql.Stmt
	findUserByPBIdStmt                                     *sql.Stmt
	insertExamStmt                                         *sql.Stmt
	insertExamExerciseStmt                                 *sql.Stmt
	insertExerciseStmt                                     *sql.Stmt
	insertLessonStmt                                       *sql.Stmt
	insertTemplateStmt                                     *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                      tx,
		tx:                                      tx,
		addUserStmt:                             q.addUserStmt,
		findAccessibleExercisesStmt:             q.findAccessibleExercisesStmt,
		findAccessibleExercisesByLessonNameStmt: q.findAccessibleExercisesByLessonNameStmt,
		findAllLessonNamesStmt:                  q.findAllLessonNamesStmt,
		findAllTemplateNamesStmt:                q.findAllTemplateNamesStmt,
		findAllUsersStmt:                        q.findAllUsersStmt,
		findExamsStmt:                           q.findExamsStmt,
		findExercisesStmt:                       q.findExercisesStmt,
		findExercisesByNameStmt:                 q.findExercisesByNameStmt,
		findLessonByNameStmt:                    q.findLessonByNameStmt,
		findLessonsStmt:                         q.findLessonsStmt,
		findPublicExercisesStmt:                 q.findPublicExercisesStmt,
		findPublicExercisesByLessonNameStmt:     q.findPublicExercisesByLessonNameStmt,
		findPublicExercisesByNameStmt:           q.findPublicExercisesByNameStmt,
		findRandomAccessibleExercisesByLessonNameWithLimitStmt: q.findRandomAccessibleExercisesByLessonNameWithLimitStmt,
		findRandomPublicExercisesByLessonNameWithLimitStmt:     q.findRandomPublicExercisesByLessonNameWithLimitStmt,
		findTemplateByNameStmt:                                 q.findTemplateByNameStmt,
		findTemplatesStmt:                                      q.findTemplatesStmt,
		findUserByEmailStmt:                                    q.findUserByEmailStmt,
		findUserByIdStmt:                                       q.findUserByIdStmt,
		findUserByPBIdStmt:                                     q.findUserByPBIdStmt,
		insertExamStmt:                                         q.insertExamStmt,
		insertExamExerciseStmt:                                 q.insertExamExerciseStmt,
		insertExerciseStmt:                                     q.insertExerciseStmt,
		insertLessonStmt:                                       q.insertLessonStmt,
		insertTemplateStmt:                                     q.insertTemplateStmt,
	}
}
