// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: template.sql

package repository

import (
	"context"
)

const findTemplates = `-- name: FindTemplates :many
SELECT id, created_at, updated_at, deleted_at, uploaded_by, pb_file_id, template_name FROM templates
`

func (q *Queries) FindTemplates(ctx context.Context) ([]Template, error) {
	rows, err := q.query(ctx, q.findTemplatesStmt, findTemplates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Template
	for rows.Next() {
		var i Template
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.UploadedBy,
			&i.PbFileID,
			&i.TemplateName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTemplate = `-- name: InsertTemplate :one
INSERT INTO
    templates (
        uploaded_by,
        pb_file_id,
        template_name
    )
VALUES (?, ?, ?) RETURNING id, created_at, updated_at, deleted_at, uploaded_by, pb_file_id, template_name
`

type InsertTemplateParams struct {
	UploadedBy   int64  `json:"uploaded_by"`
	PbFileID     string `json:"pb_file_id"`
	TemplateName string `json:"template_name"`
}

func (q *Queries) InsertTemplate(ctx context.Context, arg InsertTemplateParams) (Template, error) {
	row := q.queryRow(ctx, q.insertTemplateStmt, insertTemplate, arg.UploadedBy, arg.PbFileID, arg.TemplateName)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UploadedBy,
		&i.PbFileID,
		&i.TemplateName,
	)
	return i, err
}
