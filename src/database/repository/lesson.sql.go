// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: lesson.sql

package repository

import (
	"context"
)

const findAllLessonNames = `-- name: FindAllLessonNames :many
SELECT lesson_name FROM lessons
`

func (q *Queries) FindAllLessonNames(ctx context.Context) ([]string, error) {
	rows, err := q.query(ctx, q.findAllLessonNamesStmt, findAllLessonNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var lesson_name string
		if err := rows.Scan(&lesson_name); err != nil {
			return nil, err
		}
		items = append(items, lesson_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findLessonByName = `-- name: FindLessonByName :one
SELECT id, created_at, updated_at, deleted_at, lesson_name FROM lessons WHERE lessons.lesson_name = ? LIMIT 1
`

func (q *Queries) FindLessonByName(ctx context.Context, lessonName string) (Lesson, error) {
	row := q.queryRow(ctx, q.findLessonByNameStmt, findLessonByName, lessonName)
	var i Lesson
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.LessonName,
	)
	return i, err
}

const findLessons = `-- name: FindLessons :many
SELECT id, created_at, updated_at, deleted_at, lesson_name FROM lessons
`

func (q *Queries) FindLessons(ctx context.Context) ([]Lesson, error) {
	rows, err := q.query(ctx, q.findLessonsStmt, findLessons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Lesson
	for rows.Next() {
		var i Lesson
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.LessonName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertLesson = `-- name: InsertLesson :one
INSERT INTO
    lessons (lesson_name)
VALUES (?) RETURNING id, created_at, updated_at, deleted_at, lesson_name
`

func (q *Queries) InsertLesson(ctx context.Context, lessonName string) (Lesson, error) {
	row := q.queryRow(ctx, q.insertLessonStmt, insertLesson, lessonName)
	var i Lesson
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.LessonName,
	)
	return i, err
}
