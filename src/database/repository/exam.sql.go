// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: exam.sql

package repository

import (
	"context"
	"time"
)

const findExams = `-- name: FindExams :many
SELECT id, created_at, updated_at, deleted_at, date_of_passing, exam_number, professor_id, template_id, "foreign" FROM exams
`

func (q *Queries) FindExams(ctx context.Context) ([]Exam, error) {
	rows, err := q.query(ctx, q.findExamsStmt, findExams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exam
	for rows.Next() {
		var i Exam
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.DateOfPassing,
			&i.ExamNumber,
			&i.ProfessorID,
			&i.TemplateID,
			&i.Foreign,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertExam = `-- name: InsertExam :one
INSERT INTO
    exams (
        date_of_passing,
        exam_number,
        professor_id,
        template_id
    )
VALUES (?, ?, ?, ?) RETURNING id, created_at, updated_at, deleted_at, date_of_passing, exam_number, professor_id, template_id, "foreign"
`

type InsertExamParams struct {
	DateOfPassing time.Time `json:"date_of_passing"`
	ExamNumber    int64     `json:"exam_number"`
	ProfessorID   int64     `json:"professor_id"`
	TemplateID    int64     `json:"template_id"`
}

func (q *Queries) InsertExam(ctx context.Context, arg InsertExamParams) (Exam, error) {
	row := q.queryRow(ctx, q.insertExamStmt, insertExam,
		arg.DateOfPassing,
		arg.ExamNumber,
		arg.ProfessorID,
		arg.TemplateID,
	)
	var i Exam
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.DateOfPassing,
		&i.ExamNumber,
		&i.ProfessorID,
		&i.TemplateID,
		&i.Foreign,
	)
	return i, err
}
